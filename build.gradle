plugins {
	id "com.diffplug.eclipse.apt" version "3.25.0"
	id "java-library"
	id "eclipse-wtp"
	id "maven"
}

group = 'com.github.NewsRxTech'
version = '20201104.01'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11
compileJava {
    options.release = 11
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

install {
	repositories.mavenInstaller {
		pom.artifactId = 'xBaseJ'
	}
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	javadoc.failOnError=false
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourcesJar
	// archives javadocJar - javadoc needs fixing
}

repositories {
	jcenter()
	maven { url 'https://jitpack.io' }
}

configurations {
provided
}

dependencies {

	implementation 'commons-logging:commons-logging:1.1.1'
	implementation 'com.github.NewsRxTech:xBaseJ-annotations:20201103.01'
	
	annotationProcessor 'com.github.NewsRxTech:xBaseJ-annotations-processor:a1fec857d4'
	
	testCompile 'junit:junit:4.12'
}

sourceSets {
main {
	compileClasspath += configurations.provided
}
test {
	compileClasspath += configurations.provided
	runtimeClasspath += configurations.provided
}
}

task "create-dirs" {
	doLast{
	sourceSets*.java.srcDirs*.each { it.mkdirs() }
	sourceSets*.resources.srcDirs*.each { it.mkdirs() }
}}

eclipseJdt {
	doLast{
	File f = file('.settings/org.eclipse.core.resources.prefs')
	f.write('eclipse.preferences.version=1\n')
	f.append('encoding/<project>=utf-8')
	f = file('.settings/org.eclipse.core.runtime.prefs')
	f.write('eclipse.preferences.version=1\n')
	f.append('line.separator=\\n\n')
}}

eclipse {
	project {
		name = 'xBaseJ'
	}

	classpath {
		downloadSources = true
		downloadJavadoc = true
	}

}

configurations.all {
		resolutionStrategy {
			force 'xml-apis:xml-apis:1.4.01'
		}
	}

	test {
// enable TestNG support (default is JUnit)
//useTestNG()
maxHeapSize = "1024m"
systemProperty 'debug', 'true'
testLogging.showStandardStreams = true

// listen to events in the test execution lifecycle
beforeTest { descriptor ->
	logger.lifecycle("Running test: " + descriptor)
}

// listen to standard out and standard error of the test JVM(s)
onOutput { descriptor, event ->
	logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
}
}
