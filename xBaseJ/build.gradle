apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse-wtp'

group = 'com.github.NewsRxTech'
version = '20170201-2'

sourceCompatibility = 1.7
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

install {
    repositories.mavenInstaller {
        pom.artifactId = 'xBaseJ'
    }
}

def RTJAR = '/usr/lib/jvm/java-7-openjdk-amd64/jre/lib/rt.jar';
if (new File(RTJAR).exists()) {
	compileJava.options.bootClasspath=RTJAR
}

tasks.eclipseWtp.dependsOn(cleanEclipseWtp)

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	javadoc.failOnError=false
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 30, 'seconds'
}


repositories {
    jcenter()
    maven { url 'https://jitpack.io' }
}

configurations {
  provided
}

dependencies {
	compile 'commons-logging:commons-logging:1.1.1'
	testCompile 'junit:junit:4.12'
}
 
sourceSets {
  main {
    compileClasspath += configurations.provided
  }
  test {
    compileClasspath += configurations.provided
    runtimeClasspath += configurations.provided
  }
}

task "create-dirs" {
	doLast{
	sourceSets*.java.srcDirs*.each { it.mkdirs() }
	sourceSets*.resources.srcDirs*.each { it.mkdirs() }
}}

eclipseJdt {
	doLast{
    File f = file('.settings/org.eclipse.core.resources.prefs')
    f.write('eclipse.preferences.version=1\n')
    f.append('encoding/<project>=utf-8')
    f = file('.settings/org.eclipse.core.runtime.prefs')
    f.write('eclipse.preferences.version=1\n')
    f.append('line.separator=\\n\n')
}}

project.afterEvaluate {
	// use jre lib matching version used by project, not the workspace default
	if (sourceCompatibility != null) {
		def target = project.sourceCompatibility.toString()
		def containerPrefix = "org.eclipse.jdt.launching.JRE_CONTAINER"
		def containerSuffix
		if (target =~ /1.[4-5]/) {
			containerSuffix = '/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-' + target
		} else if (target =~ /1.[6-8]/) {
			containerSuffix = '/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-' + target
		}
		if (containerSuffix != null) {
			project.eclipse.classpath {
				containers.removeAll { it.startsWith(containerPrefix) }
				containers.add(containerPrefix + containerSuffix)
			}
		}
	}
}

eclipse {
	project {
		name = 'xBaseJ'
		natures 'org.eclipse.buildship.core.gradleprojectnature'
		referencedProjects 
	}

	classpath {
		plusConfigurations += [configurations.provided]
		downloadSources = true
		downloadJavadoc = true
	}

	jdt {
		sourceCompatibility=1.7
		targetCompatibility=1.7
	}

	wtp {
		facet {
			facets = []
			facet name: 'jst.java', version: '1.7'
			/*facet name: 'jst.web', version: '3.0'*/
		}
	}
}

configurations.all {
        resolutionStrategy {
            force 'xml-apis:xml-apis:1.4.01'
        }
    }
    
    test {
  // enable TestNG support (default is JUnit)
  //useTestNG()
  maxHeapSize = "6144m"
  systemProperty 'debug', 'true'
  testLogging.showStandardStreams = true
  
  // listen to events in the test execution lifecycle
  beforeTest { descriptor ->
     logger.lifecycle("Running test: " + descriptor)
  }

  // listen to standard out and standard error of the test JVM(s)
  onOutput { descriptor, event ->
     logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
  }
}
